//
//Copyright 2023 Google LLC
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//https://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// sqlserveragentconfig.proto
// Definition of the GC SQL Server agent protocol buffer.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.6.1
// source: sqlserveragentconfig/sqlserveragentconfig.proto

package sqlserveragentconfig

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionConfiguration *CollectionConfiguration   `protobuf:"bytes,1,opt,name=collection_configuration,json=collectionConfiguration,proto3" json:"collection_configuration,omitempty"`
	CredentialConfiguration []*CredentialConfiguration `protobuf:"bytes,2,rep,name=credential_configuration,json=credentialConfiguration,proto3" json:"credential_configuration,omitempty"`
	// default logging is INFO level
	LogLevel string `protobuf:"bytes,3,opt,name=log_level,json=logLevel,proto3" json:"log_level,omitempty"`
	// default is 10 seconds
	CollectionTimeoutSeconds int32 `protobuf:"varint,4,opt,name=collection_timeout_seconds,json=collectionTimeoutSeconds,proto3" json:"collection_timeout_seconds,omitempty"`
	// default max_retries is 3
	MaxRetries int32 `protobuf:"varint,5,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty"`
	// default retry_interval is 3600
	RetryIntervalInSeconds int32 `protobuf:"varint,6,opt,name=retry_interval_in_seconds,json=retryIntervalInSeconds,proto3" json:"retry_interval_in_seconds,omitempty"`
	// default remote collection is false
	RemoteCollection bool `protobuf:"varint,7,opt,name=remote_collection,json=remoteCollection,proto3" json:"remote_collection,omitempty"`
	// default log_to_cloud is false
	LogToCloud bool `protobuf:"varint,8,opt,name=log_to_cloud,json=logToCloud,proto3" json:"log_to_cloud,omitempty"`
	// default log_usage is false
	DisableLogUsage bool `protobuf:"varint,9,opt,name=disable_log_usage,json=disableLogUsage,proto3" json:"disable_log_usage,omitempty"`
}

func (x *Configuration) Reset() {
	*x = Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlserveragentconfig_sqlserveragentconfig_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configuration) ProtoMessage() {}

func (x *Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_sqlserveragentconfig_sqlserveragentconfig_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configuration.ProtoReflect.Descriptor instead.
func (*Configuration) Descriptor() ([]byte, []int) {
	return file_sqlserveragentconfig_sqlserveragentconfig_proto_rawDescGZIP(), []int{0}
}

func (x *Configuration) GetCollectionConfiguration() *CollectionConfiguration {
	if x != nil {
		return x.CollectionConfiguration
	}
	return nil
}

func (x *Configuration) GetCredentialConfiguration() []*CredentialConfiguration {
	if x != nil {
		return x.CredentialConfiguration
	}
	return nil
}

func (x *Configuration) GetLogLevel() string {
	if x != nil {
		return x.LogLevel
	}
	return ""
}

func (x *Configuration) GetCollectionTimeoutSeconds() int32 {
	if x != nil {
		return x.CollectionTimeoutSeconds
	}
	return 0
}

func (x *Configuration) GetMaxRetries() int32 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

func (x *Configuration) GetRetryIntervalInSeconds() int32 {
	if x != nil {
		return x.RetryIntervalInSeconds
	}
	return 0
}

func (x *Configuration) GetRemoteCollection() bool {
	if x != nil {
		return x.RemoteCollection
	}
	return false
}

func (x *Configuration) GetLogToCloud() bool {
	if x != nil {
		return x.LogToCloud
	}
	return false
}

func (x *Configuration) GetDisableLogUsage() bool {
	if x != nil {
		return x.DisableLogUsage
	}
	return false
}

type CollectionConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// defaults to True
	// enables or disables guest os collection
	CollectGuestOsMetrics bool `protobuf:"varint,1,opt,name=collect_guest_os_metrics,json=collectGuestOsMetrics,proto3" json:"collect_guest_os_metrics,omitempty"`
	// defaults to 3600 (1 hour)
	// guest os metrics collection interval
	GuestOsMetricsCollectionIntervalInSeconds int32 `protobuf:"varint,2,opt,name=guest_os_metrics_collection_interval_in_seconds,json=guestOsMetricsCollectionIntervalInSeconds,proto3" json:"guest_os_metrics_collection_interval_in_seconds,omitempty"`
	// defaultsto True
	// enables or disables SQL Server collection
	CollectSqlMetrics bool `protobuf:"varint,3,opt,name=collect_sql_metrics,json=collectSqlMetrics,proto3" json:"collect_sql_metrics,omitempty"`
	// defaults to 3600 (1 hour)
	// SQL Server metrics collection interval
	SqlMetricsCollectionIntervalInSeconds int32 `protobuf:"varint,4,opt,name=sql_metrics_collection_interval_in_seconds,json=sqlMetricsCollectionIntervalInSeconds,proto3" json:"sql_metrics_collection_interval_in_seconds,omitempty"`
}

func (x *CollectionConfiguration) Reset() {
	*x = CollectionConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlserveragentconfig_sqlserveragentconfig_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionConfiguration) ProtoMessage() {}

func (x *CollectionConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_sqlserveragentconfig_sqlserveragentconfig_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionConfiguration.ProtoReflect.Descriptor instead.
func (*CollectionConfiguration) Descriptor() ([]byte, []int) {
	return file_sqlserveragentconfig_sqlserveragentconfig_proto_rawDescGZIP(), []int{1}
}

func (x *CollectionConfiguration) GetCollectGuestOsMetrics() bool {
	if x != nil {
		return x.CollectGuestOsMetrics
	}
	return false
}

func (x *CollectionConfiguration) GetGuestOsMetricsCollectionIntervalInSeconds() int32 {
	if x != nil {
		return x.GuestOsMetricsCollectionIntervalInSeconds
	}
	return 0
}

func (x *CollectionConfiguration) GetCollectSqlMetrics() bool {
	if x != nil {
		return x.CollectSqlMetrics
	}
	return false
}

func (x *CollectionConfiguration) GetSqlMetricsCollectionIntervalInSeconds() int32 {
	if x != nil {
		return x.SqlMetricsCollectionIntervalInSeconds
	}
	return 0
}

type CredentialConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// host name for SQL Server connection
	//
	// Deprecated: Marked as deprecated in sqlserveragentconfig/sqlserveragentconfig.proto.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// full user name for SQL Server connection
	//
	// Deprecated: Marked as deprecated in sqlserveragentconfig/sqlserveragentconfig.proto.
	UserName string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// credential secret name stored in secrets manager
	//
	// Deprecated: Marked as deprecated in sqlserveragentconfig/sqlserveragentconfig.proto.
	SecretName string `protobuf:"bytes,3,opt,name=secret_name,json=secretName,proto3" json:"secret_name,omitempty"`
	// defaults to 1433
	//
	// Deprecated: Marked as deprecated in sqlserveragentconfig/sqlserveragentconfig.proto.
	PortNumber int32 `protobuf:"varint,4,opt,name=port_number,json=portNumber,proto3" json:"port_number,omitempty"`
	// full server name
	//
	// Deprecated: Marked as deprecated in sqlserveragentconfig/sqlserveragentconfig.proto.
	ServerName string `protobuf:"bytes,5,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	// full user name for guest collection
	//
	// Deprecated: Marked as deprecated in sqlserveragentconfig/sqlserveragentconfig.proto.
	GuestUserName string `protobuf:"bytes,6,opt,name=guest_user_name,json=guestUserName,proto3" json:"guest_user_name,omitempty"`
	// credential secret name stored in secrets manager
	//
	// Deprecated: Marked as deprecated in sqlserveragentconfig/sqlserveragentconfig.proto.
	GuestSecretName string `protobuf:"bytes,7,opt,name=guest_secret_name,json=guestSecretName,proto3" json:"guest_secret_name,omitempty"`
	// instance_name of target machine, typically the remote machine
	InstanceName string `protobuf:"bytes,8,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	// instance_idof target machine, typically the remote machine
	InstanceId string `protobuf:"bytes,9,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// guest_port_number is port number used for os collection
	//
	// Deprecated: Marked as deprecated in sqlserveragentconfig/sqlserveragentconfig.proto.
	GuestPortNumber int32 `protobuf:"varint,10,opt,name=guest_port_number,json=guestPortNumber,proto3" json:"guest_port_number,omitempty"`
	// linux_remote true for remote linux collection, default false for windows
	// remote collection
	//
	// Deprecated: Marked as deprecated in sqlserveragentconfig/sqlserveragentconfig.proto.
	LinuxRemote bool `protobuf:"varint,11,opt,name=linux_remote,json=linuxRemote,proto3" json:"linux_remote,omitempty"`
	// private key for linux remote collection
	//
	// Deprecated: Marked as deprecated in sqlserveragentconfig/sqlserveragentconfig.proto.
	LinuxSshPrivateKeyPath string                                    `protobuf:"bytes,12,opt,name=linux_ssh_private_key_path,json=linuxSshPrivateKeyPath,proto3" json:"linux_ssh_private_key_path,omitempty"`
	SqlConfigurations      []*CredentialConfiguration_SqlCredentials `protobuf:"bytes,13,rep,name=sql_configurations,json=sqlConfigurations,proto3" json:"sql_configurations,omitempty"`
	// Types that are assignable to GuestConfigurations:
	//
	//	*CredentialConfiguration_LocalCollection
	//	*CredentialConfiguration_RemoteWin
	//	*CredentialConfiguration_RemoteLinux
	GuestConfigurations isCredentialConfiguration_GuestConfigurations `protobuf_oneof:"guest_configurations"`
}

func (x *CredentialConfiguration) Reset() {
	*x = CredentialConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlserveragentconfig_sqlserveragentconfig_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialConfiguration) ProtoMessage() {}

func (x *CredentialConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_sqlserveragentconfig_sqlserveragentconfig_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialConfiguration.ProtoReflect.Descriptor instead.
func (*CredentialConfiguration) Descriptor() ([]byte, []int) {
	return file_sqlserveragentconfig_sqlserveragentconfig_proto_rawDescGZIP(), []int{2}
}

// Deprecated: Marked as deprecated in sqlserveragentconfig/sqlserveragentconfig.proto.
func (x *CredentialConfiguration) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

// Deprecated: Marked as deprecated in sqlserveragentconfig/sqlserveragentconfig.proto.
func (x *CredentialConfiguration) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

// Deprecated: Marked as deprecated in sqlserveragentconfig/sqlserveragentconfig.proto.
func (x *CredentialConfiguration) GetSecretName() string {
	if x != nil {
		return x.SecretName
	}
	return ""
}

// Deprecated: Marked as deprecated in sqlserveragentconfig/sqlserveragentconfig.proto.
func (x *CredentialConfiguration) GetPortNumber() int32 {
	if x != nil {
		return x.PortNumber
	}
	return 0
}

// Deprecated: Marked as deprecated in sqlserveragentconfig/sqlserveragentconfig.proto.
func (x *CredentialConfiguration) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

// Deprecated: Marked as deprecated in sqlserveragentconfig/sqlserveragentconfig.proto.
func (x *CredentialConfiguration) GetGuestUserName() string {
	if x != nil {
		return x.GuestUserName
	}
	return ""
}

// Deprecated: Marked as deprecated in sqlserveragentconfig/sqlserveragentconfig.proto.
func (x *CredentialConfiguration) GetGuestSecretName() string {
	if x != nil {
		return x.GuestSecretName
	}
	return ""
}

func (x *CredentialConfiguration) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *CredentialConfiguration) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

// Deprecated: Marked as deprecated in sqlserveragentconfig/sqlserveragentconfig.proto.
func (x *CredentialConfiguration) GetGuestPortNumber() int32 {
	if x != nil {
		return x.GuestPortNumber
	}
	return 0
}

// Deprecated: Marked as deprecated in sqlserveragentconfig/sqlserveragentconfig.proto.
func (x *CredentialConfiguration) GetLinuxRemote() bool {
	if x != nil {
		return x.LinuxRemote
	}
	return false
}

// Deprecated: Marked as deprecated in sqlserveragentconfig/sqlserveragentconfig.proto.
func (x *CredentialConfiguration) GetLinuxSshPrivateKeyPath() string {
	if x != nil {
		return x.LinuxSshPrivateKeyPath
	}
	return ""
}

func (x *CredentialConfiguration) GetSqlConfigurations() []*CredentialConfiguration_SqlCredentials {
	if x != nil {
		return x.SqlConfigurations
	}
	return nil
}

func (m *CredentialConfiguration) GetGuestConfigurations() isCredentialConfiguration_GuestConfigurations {
	if m != nil {
		return m.GuestConfigurations
	}
	return nil
}

func (x *CredentialConfiguration) GetLocalCollection() bool {
	if x, ok := x.GetGuestConfigurations().(*CredentialConfiguration_LocalCollection); ok {
		return x.LocalCollection
	}
	return false
}

func (x *CredentialConfiguration) GetRemoteWin() *CredentialConfiguration_GuestCredentialsRemoteWin {
	if x, ok := x.GetGuestConfigurations().(*CredentialConfiguration_RemoteWin); ok {
		return x.RemoteWin
	}
	return nil
}

func (x *CredentialConfiguration) GetRemoteLinux() *CredentialConfiguration_GuestCredentialsRemoteLinux {
	if x, ok := x.GetGuestConfigurations().(*CredentialConfiguration_RemoteLinux); ok {
		return x.RemoteLinux
	}
	return nil
}

type isCredentialConfiguration_GuestConfigurations interface {
	isCredentialConfiguration_GuestConfigurations()
}

type CredentialConfiguration_LocalCollection struct {
	LocalCollection bool `protobuf:"varint,14,opt,name=local_collection,json=localCollection,proto3,oneof"`
}

type CredentialConfiguration_RemoteWin struct {
	RemoteWin *CredentialConfiguration_GuestCredentialsRemoteWin `protobuf:"bytes,15,opt,name=remote_win,json=remoteWin,proto3,oneof"`
}

type CredentialConfiguration_RemoteLinux struct {
	RemoteLinux *CredentialConfiguration_GuestCredentialsRemoteLinux `protobuf:"bytes,16,opt,name=remote_linux,json=remoteLinux,proto3,oneof"`
}

func (*CredentialConfiguration_LocalCollection) isCredentialConfiguration_GuestConfigurations() {}

func (*CredentialConfiguration_RemoteWin) isCredentialConfiguration_GuestConfigurations() {}

func (*CredentialConfiguration_RemoteLinux) isCredentialConfiguration_GuestConfigurations() {}

type CredentialConfiguration_SqlCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// host name for SQL Server connection
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// full user name for SQL Server connection
	UserName string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// credential secret name stored in secrets manager
	SecretName string `protobuf:"bytes,3,opt,name=secret_name,json=secretName,proto3" json:"secret_name,omitempty"`
	// defaults to 1433
	PortNumber int32 `protobuf:"varint,4,opt,name=port_number,json=portNumber,proto3" json:"port_number,omitempty"`
}

func (x *CredentialConfiguration_SqlCredentials) Reset() {
	*x = CredentialConfiguration_SqlCredentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlserveragentconfig_sqlserveragentconfig_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialConfiguration_SqlCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialConfiguration_SqlCredentials) ProtoMessage() {}

func (x *CredentialConfiguration_SqlCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_sqlserveragentconfig_sqlserveragentconfig_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialConfiguration_SqlCredentials.ProtoReflect.Descriptor instead.
func (*CredentialConfiguration_SqlCredentials) Descriptor() ([]byte, []int) {
	return file_sqlserveragentconfig_sqlserveragentconfig_proto_rawDescGZIP(), []int{2, 0}
}

func (x *CredentialConfiguration_SqlCredentials) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *CredentialConfiguration_SqlCredentials) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *CredentialConfiguration_SqlCredentials) GetSecretName() string {
	if x != nil {
		return x.SecretName
	}
	return ""
}

func (x *CredentialConfiguration_SqlCredentials) GetPortNumber() int32 {
	if x != nil {
		return x.PortNumber
	}
	return 0
}

type CredentialConfiguration_GuestCredentialsRemoteWin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// full server name
	ServerName string `protobuf:"bytes,1,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	// full user name for guest collection
	GuestUserName string `protobuf:"bytes,2,opt,name=guest_user_name,json=guestUserName,proto3" json:"guest_user_name,omitempty"`
	// credential secret name stored in secrets manager
	GuestSecretName string `protobuf:"bytes,3,opt,name=guest_secret_name,json=guestSecretName,proto3" json:"guest_secret_name,omitempty"`
}

func (x *CredentialConfiguration_GuestCredentialsRemoteWin) Reset() {
	*x = CredentialConfiguration_GuestCredentialsRemoteWin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlserveragentconfig_sqlserveragentconfig_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialConfiguration_GuestCredentialsRemoteWin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialConfiguration_GuestCredentialsRemoteWin) ProtoMessage() {}

func (x *CredentialConfiguration_GuestCredentialsRemoteWin) ProtoReflect() protoreflect.Message {
	mi := &file_sqlserveragentconfig_sqlserveragentconfig_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialConfiguration_GuestCredentialsRemoteWin.ProtoReflect.Descriptor instead.
func (*CredentialConfiguration_GuestCredentialsRemoteWin) Descriptor() ([]byte, []int) {
	return file_sqlserveragentconfig_sqlserveragentconfig_proto_rawDescGZIP(), []int{2, 1}
}

func (x *CredentialConfiguration_GuestCredentialsRemoteWin) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *CredentialConfiguration_GuestCredentialsRemoteWin) GetGuestUserName() string {
	if x != nil {
		return x.GuestUserName
	}
	return ""
}

func (x *CredentialConfiguration_GuestCredentialsRemoteWin) GetGuestSecretName() string {
	if x != nil {
		return x.GuestSecretName
	}
	return ""
}

type CredentialConfiguration_GuestCredentialsRemoteLinux struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// full server name
	ServerName string `protobuf:"bytes,1,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	// full user name for guest collection
	GuestUserName string `protobuf:"bytes,2,opt,name=guest_user_name,json=guestUserName,proto3" json:"guest_user_name,omitempty"`
	// credential secret name stored in secrets manager
	GuestPortNumber int32 `protobuf:"varint,3,opt,name=guest_port_number,json=guestPortNumber,proto3" json:"guest_port_number,omitempty"`
	// private key for linux remote collection
	LinuxSshPrivateKeyPath string `protobuf:"bytes,4,opt,name=linux_ssh_private_key_path,json=linuxSshPrivateKeyPath,proto3" json:"linux_ssh_private_key_path,omitempty"`
}

func (x *CredentialConfiguration_GuestCredentialsRemoteLinux) Reset() {
	*x = CredentialConfiguration_GuestCredentialsRemoteLinux{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sqlserveragentconfig_sqlserveragentconfig_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialConfiguration_GuestCredentialsRemoteLinux) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialConfiguration_GuestCredentialsRemoteLinux) ProtoMessage() {}

func (x *CredentialConfiguration_GuestCredentialsRemoteLinux) ProtoReflect() protoreflect.Message {
	mi := &file_sqlserveragentconfig_sqlserveragentconfig_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialConfiguration_GuestCredentialsRemoteLinux.ProtoReflect.Descriptor instead.
func (*CredentialConfiguration_GuestCredentialsRemoteLinux) Descriptor() ([]byte, []int) {
	return file_sqlserveragentconfig_sqlserveragentconfig_proto_rawDescGZIP(), []int{2, 2}
}

func (x *CredentialConfiguration_GuestCredentialsRemoteLinux) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *CredentialConfiguration_GuestCredentialsRemoteLinux) GetGuestUserName() string {
	if x != nil {
		return x.GuestUserName
	}
	return ""
}

func (x *CredentialConfiguration_GuestCredentialsRemoteLinux) GetGuestPortNumber() int32 {
	if x != nil {
		return x.GuestPortNumber
	}
	return 0
}

func (x *CredentialConfiguration_GuestCredentialsRemoteLinux) GetLinuxSshPrivateKeyPath() string {
	if x != nil {
		return x.LinuxSshPrivateKeyPath
	}
	return ""
}

var File_sqlserveragentconfig_sqlserveragentconfig_proto protoreflect.FileDescriptor

var file_sqlserveragentconfig_sqlserveragentconfig_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x73, 0x71, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x71, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x14, 0x73, 0x71, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x95, 0x04, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x18, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x71,
	0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x18, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x71, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f,
	0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d,
	0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x72, 0x65, 0x74,
	0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x49, 0x6e, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x54, 0x6f, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c,
	0x6f, 0x67, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x55, 0x73, 0x61, 0x67, 0x65, 0x22,
	0xc1, 0x02, 0x0a, 0x17, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x18, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x67, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x73, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x73, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x12, 0x62, 0x0a, 0x2f, 0x67, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x73,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x29, 0x67,
	0x75, 0x65, 0x73, 0x74, 0x4f, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x49,
	0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x5f, 0x73, 0x71, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x71,
	0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x59, 0x0a, 0x2a, 0x73, 0x71, 0x6c, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x25, 0x73, 0x71,
	0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x22, 0xf0, 0x0a, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0b, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x23, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0f, 0x67, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x67, 0x75, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x11, 0x67, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x0f, 0x67, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x11, 0x67, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x67, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0c, 0x6c, 0x69, 0x6e,
	0x75, 0x78, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x0b, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x12, 0x3e, 0x0a, 0x1a, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x5f, 0x73, 0x73, 0x68, 0x5f, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x16, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x53,
	0x73, 0x68, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x6b, 0x0a, 0x12, 0x73, 0x71, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x73,
	0x71, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x71, 0x6c, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x11, 0x73, 0x71, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a,
	0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x0a, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47,
	0x2e, 0x73, 0x71, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x75,
	0x65, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x57, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x57, 0x69, 0x6e, 0x12, 0x6e, 0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6c,
	0x69, 0x6e, 0x75, 0x78, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x73, 0x71, 0x6c,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x75, 0x65, 0x73, 0x74, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x4c, 0x69, 0x6e, 0x75, 0x78, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4c,
	0x69, 0x6e, 0x75, 0x78, 0x1a, 0x83, 0x01, 0x0a, 0x0e, 0x53, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x70, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x90, 0x01, 0x0a, 0x19, 0x47,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x67, 0x75, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xce, 0x01,
	0x0a, 0x1b, 0x47, 0x75, 0x65, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x67, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x75, 0x65, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x67, 0x75, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x3a, 0x0a, 0x1a, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x5f, 0x73, 0x73, 0x68, 0x5f,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x53, 0x73, 0x68,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x74, 0x68, 0x42, 0x16,
	0x0a, 0x14, 0x67, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sqlserveragentconfig_sqlserveragentconfig_proto_rawDescOnce sync.Once
	file_sqlserveragentconfig_sqlserveragentconfig_proto_rawDescData = file_sqlserveragentconfig_sqlserveragentconfig_proto_rawDesc
)

func file_sqlserveragentconfig_sqlserveragentconfig_proto_rawDescGZIP() []byte {
	file_sqlserveragentconfig_sqlserveragentconfig_proto_rawDescOnce.Do(func() {
		file_sqlserveragentconfig_sqlserveragentconfig_proto_rawDescData = protoimpl.X.CompressGZIP(file_sqlserveragentconfig_sqlserveragentconfig_proto_rawDescData)
	})
	return file_sqlserveragentconfig_sqlserveragentconfig_proto_rawDescData
}

var file_sqlserveragentconfig_sqlserveragentconfig_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_sqlserveragentconfig_sqlserveragentconfig_proto_goTypes = []interface{}{
	(*Configuration)(nil),                                       // 0: sqlserveragentconfig.Configuration
	(*CollectionConfiguration)(nil),                             // 1: sqlserveragentconfig.CollectionConfiguration
	(*CredentialConfiguration)(nil),                             // 2: sqlserveragentconfig.CredentialConfiguration
	(*CredentialConfiguration_SqlCredentials)(nil),              // 3: sqlserveragentconfig.CredentialConfiguration.SqlCredentials
	(*CredentialConfiguration_GuestCredentialsRemoteWin)(nil),   // 4: sqlserveragentconfig.CredentialConfiguration.GuestCredentialsRemoteWin
	(*CredentialConfiguration_GuestCredentialsRemoteLinux)(nil), // 5: sqlserveragentconfig.CredentialConfiguration.GuestCredentialsRemoteLinux
}
var file_sqlserveragentconfig_sqlserveragentconfig_proto_depIdxs = []int32{
	1, // 0: sqlserveragentconfig.Configuration.collection_configuration:type_name -> sqlserveragentconfig.CollectionConfiguration
	2, // 1: sqlserveragentconfig.Configuration.credential_configuration:type_name -> sqlserveragentconfig.CredentialConfiguration
	3, // 2: sqlserveragentconfig.CredentialConfiguration.sql_configurations:type_name -> sqlserveragentconfig.CredentialConfiguration.SqlCredentials
	4, // 3: sqlserveragentconfig.CredentialConfiguration.remote_win:type_name -> sqlserveragentconfig.CredentialConfiguration.GuestCredentialsRemoteWin
	5, // 4: sqlserveragentconfig.CredentialConfiguration.remote_linux:type_name -> sqlserveragentconfig.CredentialConfiguration.GuestCredentialsRemoteLinux
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_sqlserveragentconfig_sqlserveragentconfig_proto_init() }
func file_sqlserveragentconfig_sqlserveragentconfig_proto_init() {
	if File_sqlserveragentconfig_sqlserveragentconfig_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sqlserveragentconfig_sqlserveragentconfig_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlserveragentconfig_sqlserveragentconfig_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlserveragentconfig_sqlserveragentconfig_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredentialConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlserveragentconfig_sqlserveragentconfig_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredentialConfiguration_SqlCredentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlserveragentconfig_sqlserveragentconfig_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredentialConfiguration_GuestCredentialsRemoteWin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sqlserveragentconfig_sqlserveragentconfig_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredentialConfiguration_GuestCredentialsRemoteLinux); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sqlserveragentconfig_sqlserveragentconfig_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*CredentialConfiguration_LocalCollection)(nil),
		(*CredentialConfiguration_RemoteWin)(nil),
		(*CredentialConfiguration_RemoteLinux)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sqlserveragentconfig_sqlserveragentconfig_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sqlserveragentconfig_sqlserveragentconfig_proto_goTypes,
		DependencyIndexes: file_sqlserveragentconfig_sqlserveragentconfig_proto_depIdxs,
		MessageInfos:      file_sqlserveragentconfig_sqlserveragentconfig_proto_msgTypes,
	}.Build()
	File_sqlserveragentconfig_sqlserveragentconfig_proto = out.File
	file_sqlserveragentconfig_sqlserveragentconfig_proto_rawDesc = nil
	file_sqlserveragentconfig_sqlserveragentconfig_proto_goTypes = nil
	file_sqlserveragentconfig_sqlserveragentconfig_proto_depIdxs = nil
}
